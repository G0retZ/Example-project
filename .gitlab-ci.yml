image: gitlab.capsrv.xyz:5000/android-ci:latest

stages:
  - build
  - test
  - deploy

before_script:
- export GRADLE_USER_HOME=$(pwd)/.gradle
- chmod +x ./gradlew

cache:
  key: ${CI_PROJECT_ID}
  paths:
  - .gradle/

# Зачищаем для сборок dev и веток юзер сторей
debug_clean:
  stage: build
  tags:
    - android
  only:
    - dev
    - /^feature.*$/
    - /^refactor.*$/
    - /^bugfix.*$/
    - /^performance.*$/
  script:
    - ./gradlew clean :app:generateDebugSources --no-daemon
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/
    expire_in: 1 day

# Зачищаем для сборок release-*
staging_clean:
  stage: build
  tags:
    - android
  only:
    - /^release.*$/
    - /^hotfix.*$/
  script:
    - ./gradlew clean :app:generateStagingSources --no-daemon
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/
    expire_in: 1 day

# Зачищаем для сборок выкаченных версий
release_clean:
  stage: build
  tags:
    - android
  only:
    - /^\d+\.\d+(\.\d+){0,1}$/
  except:
    - branches
  script:
    - ./gradlew clean :app:generateReleaseSources --no-daemon
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/
    expire_in: 1 day

# Запускаем юнит тесты всегда
unit_test:
  stage: test
  tags:
    - android
  script:
  - ./gradlew test --no-daemon
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/
    expire_in: 1 day

# Деплоим ветки юзер сторей в APK
feature_deploy:
  stage: deploy
  tags:
    - android
  only:
    - /^feature.*$/
    - /^refactor.*$/
    - /^bugfix.*$/
    - /^performance.*$/
  script:
    - ./gradlew assembleDebug  --no-daemon
    - cp app/build/outputs/apk/debug/app-debug.apk "/opt/build/executor-app-`echo ${CI_COMMIT_REF_NAME} | sed -e 's/.*\(\(RUCAP\|CR\)-[0-9]*\).*/\1/'`.apk"
  artifacts:
    name: "build_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/outputs/apk/
    expire_in: 1 day

# Деплоим dev в APK
develop_deploy:
  stage: deploy
  tags:
    - android
  only:
    - dev
  script:
    - ./gradlew assembleDebug  --no-daemon
    - cp app/build/outputs/apk/debug/app-debug.apk /opt/build/executor-app-debug.apk
  artifacts:
    name: "build_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/outputs/apk/
    expire_in: 1 day

# Деплоим release-* в APK
staging_deploy:
  stage: deploy
  tags:
    - android
  only:
    - /^release.*$/
    - /^hotfix.*$/
  script:
    - ./gradlew assembleStaging  --no-daemon
    - cp app/build/outputs/apk/staging/app-staging.apk /opt/build/executor-app-staging.apk
  artifacts:
    name: "build_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/outputs/apk/
    expire_in: 1 day

# Деплоим саму релизную сборку по новому тэгу для выкладывания на маркет
release_deploy:
  stage: deploy
  tags:
    - android
  only:
    - /^\d+\.\d+(\.\d+){0,1}$/
  except:
    - branches
  script:
    - ./gradlew assembleRelease  --no-daemon
    - cp app/build/outputs/apk/release/app-release.apk /opt/build/executor-app-release.apk
  artifacts:
    name: "build_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/outputs/apk/
    expire_in: 1 day